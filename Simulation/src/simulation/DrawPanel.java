/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package simulation;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import javax.swing.Timer;

/**
 *
 * @author frank
 */
public class DrawPanel extends javax.swing.JPanel implements MouseMotionListener {

    private final int defaultFrameRate = 30;
    public int frameRate = defaultFrameRate;
    private Timer timer;
    protected Graphics2D g2d;
    private BufferedImage imageBuffered = null;
    private boolean drawingLoopStarted = false;
    public int width;
    public int height;
    public int mouseX = 0;
    public int mouseY = 0;
    public boolean debug = false;

    /**
     * Creates new form DrawPanel
     */
    public DrawPanel() {
        initComponents();
        addMouseMotionListener(this);
        setBackground(Color.white);
    }

    public DrawPanel(int frameRate) {
        this();
        this.frameRate = frameRate;
    }

    public void setFrameRate(int frameRate) {
        this.frameRate = frameRate;
        if (timer.isRunning()) {
            timer.stop();
            drawingLoopStarted = false;
            repaint();
        }
    }
    
    public void setDebug(boolean debug) {
        this.debug = debug;
    }

    public void startDrawingLoop() {
        timer = new Timer(1000 / frameRate, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                repaint();
            }
        });
        timer.setRepeats(true);
        timer.start();
        Point p = MouseInfo.getPointerInfo().getLocation();
        mouseX = p.x;
        mouseY = p.y;
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        if (imageBuffered == null) {
            imageBuffered = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);
        }
        //g2d.clearRect(0,0,getWidth(),getHeight());
        if (!drawingLoopStarted) {
            drawingLoopStarted = true;
            g2d = imageBuffered.createGraphics();
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
            width = getWidth();
            height = getHeight();
            setup();
            startDrawingLoop();
        } else {
            draw();
        }
        g.drawImage(imageBuffered, 0, 0, this);
    }

    public Graphics2D getGraphics2D() {
        return g2d;
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        mouseX = e.getX();
        mouseY = e.getY();
    }

    @Override
    public void mouseDragged(MouseEvent e) {
    }

    public void setup() {
    }

    public void draw() {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
